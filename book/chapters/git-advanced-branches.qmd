---
format: "html"
---
# Git branching and merging 

## Overview
| Questions | Objectives |
|-----------|------------|
| What are branches and how to use them? | Understand adding changes in two separate branches.|
| | Merge branches.|
| | Issues and branches. |

## What are branches?

A branch is a line of development in which you develop a new feature of your code or you refine on an existing feature in your code. Usually the branches called "main" or "master" branch are the default branches in Git. Usually we do not want to change them directly, they should contain a verified version of your code that can be run.

You can see all branches in the dropdown menu when you click on the button "Main". 

![](../images/github_figures_screenshots/git_branches.png)

Branches contain different versions of files or extra files. Usually a branch contains the code for one new feature.

In the previous part we created a repository with only one branch, the main branch. 
Now we want to do this:

![](../images/github_figures_screenshots/git_gophers.png)

Software development is often not linear:

- We typically need at least one version of the code to “work” (to compile, to give expected results, …) --> "Main" or "Master"
- At the same time we work on new features, often several features concurrently. Often they are unfinished.
- We need to be able to separate different lines of work really well.

The strength of version control is that it permits the researcher to isolate different tracks of work, which can later be merged to create a composite version that contains all changes:

![](../images/github_figures_screenshots/git-collaborative-branches.svg)



- We see branching points and merging points.
- Main line development is often called main or master.
- Other than this convention there is nothing special about main or master, it is a branch like any other.
- Commits form a directed acyclic graph (we have left out the arrows to avoid confusion about the time arrow).

A group of commits that create a single narrative are called a branch. There are different branching strategies, but it is useful to think that a branch tells the story of a feature, e.g. “fast sequence extraction” or “Python interface” or “fixing bug in matrix inversion algorithm”.

To experiment with branches we will create a "fork" from our recipe GitHub repository:

- Go to https://tinyurl.com/repcorecipes
- Click on the Dropdown menu "Fork" and "Create new fork"

## Creating 

Now we use the web browser to create a new branch in your own recipe repository on Github. You can create a branch in the web browser like this:

1. Go to your repository
2. Click on "Main" (see screenshot above) and click on "View all branches". You will get an overview of all branches and how actively they are used.
3. Click on "New branch" and give the new branch a name e.g. "cakes".
 
We have now two branches, both containing the same files in the remote repository. 

Since we only have one branch, the "main" branch, the new branch will automatically created from there. Once you have more than one branch, you can select from which branch you would like to create the new one.

We need to update our local repository on our laptop and "switch" to the new branch to work on a new feature.

## Working with branches in the web browser 

Navigate back to your recipe-book. When you now click on "main", you will see the second branch. By clicking on the new branch we switch or "checkout" the its contents.

We can now create a new folder "cakes" and a file "chocolate_cake.md":

- Click on "Add file" and "Create new file"
- In the field to add a name for the file fill in "cakes/chcoclate_cake.md"

![](../images/github_figures_screenshots/git_branches_cake.png)width=700 fig-align="center"}

- Commit your changes to the cake branch

You will see the file being committed and rendered.
However, if you now try to switch branches to main (click on "cakes" and choose "main") for this file you will see a "404" error. the file does not exist in the main branch.

### Merging the changes into the main branch

How can we now "merge" the new recipe into the main branch?
In Git merging two branches in the web browser can be done by so-called "Pull requests" or PRs. Pull requests are a way to change, review, and merge code in a Git repository.

To create a Pull request, click on the tab "Pull Requests" and then on the button "New pull request".

We can choose now the "base" branch, the branch we would like to update and the "compare" branch, the branch with which we would like to update the "base".

Select as "base" your main branch and **adjust the repository**. Since our repository is a "Fork", GitHub assumes we would like to merge our changes into the repository we forked our repository from. We can adjust that by clicking on "base repository" and o our own repository. Next we set the base branch to "main". Now we need to choose the  compare branch and set that to "cakes".

You will see the differences between the two branches popping up. 

![](../images/github_figures_screenshots/git_pull_request.png)width=700 fig-align="center"}

GitHub also informs us whether the changes can be merged without any problems.

Click on "Create pull request", give the PR a name and a description.

We can decide to alter our recipe in the cakes branch, the "Pull Request" will recognise those changes and include them. I.e. you can continue to work on your changes you suggested in the "Pull request" and all those new changes will be included in the update.

To update your main branch, or as we say in git: To merge your changes into "main" click on the button "Merge pull request".
This does not only update the content of the files in your main branch, but also adds all your commits from the "cakes" branch to the history of the main branch.

![](../images/github_figures_screenshots/git_update_history.png){width=700 fig-align="center"}

Since all of our changes are now in the main branch, we can delete our "cakes" branch. Navigate to the branch overview and click on the little trash can next to your "cakes" branch.


### Inspecting merges and your development

The branches webpage gives us a good overview over which branches are active, stale or have already been merged. However to get a whole overview GitHub gives you some more insights:

- Click on the tab "Insights"
- And then on the left hand side on "Network". It will take some time until the information is shown.

![](../images/github_figures_screenshots/git_network.png){width=700 fig-align="center"}

You will see the network graph of your own recipe repository, but also all other "forks" by other people.

In your section you should see that we started out with the main branch and we created another branch (blue line). The blue line shows one dot, and when you hover over it you will see the information that this is a commit with an identifier (hash). The arrow at the end of the blue line denotes that this branch was merged into the main branch.

Even though we deleted the "cakes" branch, GitHub still knows where and when our commits were made!!!

## Working with branches on your laptop

In the previous section we saw how to work with branches in the web interface. Assume now we want to do some development on our laptop. How can we retrieve the information on branches and and switch to the branch we want to locally work on.

If you have not done so yet "clone" the repository to you computer:

```
git clone git@github.com:<user>/recipe-book.git
cd recipe-book
```
Now we create a new branch in the web interface, this time it will be "cheesecake".


```
git pull
```

We can list all branches in the repository with

```
git branch -a

* main
  remotes/origin/HEAD -> origin/main
  remotes/origin/cheesecake
  remotes/origin/main
```

This command shows us also that the branch we are on is the main branch.

To switch between branches we use the command "checkout":

```
git checkout cheesecake
```

And we can verify which branch we are currently on with

```
git status
```

## Exercise: Create and commit to the new branch

- Add a cheesecake recipe to your local repository on the "cheesecake" branch
- Commit the changes and push them
- Verify in the web browser that the files in "main" and the "cheesecake" branch differ.

- Merge the two branches in the web interface through creating a "Pull request"


## Summary

In this part of the tutorial we saw:

- How to create branches in the remote repository through the web interface
- How we can update the content of branches
- How we can merge changes from one branch into another branch

## Creating branches in your local repository
In the sections above we discussed how to create a branch in the remote repository on GitHub and then working with that branch on your computer in your local repository. 

You can also create branches directly in your local repository on your computer.

Let us create a new cake recipe branch only in your local repository:

```
git branch applepie main
```

The command creates a branch called "applepie" from the main branch and it is only available in your local repository (no "remotes" prefix)

```
git branch -a
  applepie
* main
  remotes/origin/HEAD -> origin/main
  remotes/origin/cheesecake
  remotes/origin/main
```

Now we can check this out and add an apple pie recipe

```
git checkout applepie
```

We add a local file "cakes/applepie.md" with some ingredients and. instructions.

```
git status

On branch applepie
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	cakes/applepie.md
```

We need to commit our changes. **Note**, this time we only create the commit, we do not push to the remote repository:

```
git add cakes/applepie.md
git commit -m "adding applepie"
```

We could push now the new branch to our remote GitHub repository and follow the workflow above to merge the changes into the main branch.
But in this example we will merge the changes in our local repository.

### Merging the branch locally

To merge changes from a development branch into the main or another branch you need to first switch to the branch into which you want to merge.
In our case we want to merge into main. So we need to switch/checkout again to the main branch:

```
git checkout main
git status
```

Now we can merge "applepie" into main:

```
git merge applepie


Updating 2565755..ea932e4
Fast-forward
 cakes/applepie.md | 12 ++++++++++++
 1 file changed, 12 insertions(+)
 create mode 100644 cakes/applepie.md
```

Now we can "push" the changes of our altered local main branch to the remote repository and delete our local branch:

```
git push
git branch -d applepie
git branch -a
```

Now verify in the web browser that your new apple pie recipie is present in the remote main branch.

## Summary
In this part of the tutorial we showed:

- How to create a branch only in your local repository and how to update its contents
- How to merge the changes from the branch in your local repository into the main branch in your local repository


## Issues

In GitHub users of your code or you yourself can create "issues". An issue can e a feature request, a bug or simply a contained "Todo" in your project.

Click on the tab "Issues" and create one.

![](../images/github_figures_screenshots/git_issue.png)

Once the issue is created, you can create a branch for it like we did beforehand:

![](../images/github_figures_screenshots/git_branch_for_issue.png)

Once the branch tackling the content of the issue is merged, the issue will be closed automatically. Also any commits on the branch are shown in the description of the issue, which is very handy feature together with the commenting and by this having a discussion about the code.

## Merge conflicts