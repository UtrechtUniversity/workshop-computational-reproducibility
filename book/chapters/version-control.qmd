---
format: "html"
---
# Automated version control 

## Overview
| Questions | Objectives |
|-----------|------------|
| What is version control and Why should I use it? | Understand the benefits of an automated version control system.|
| | Understand the basics of how automated version control systems work|
| How do I record changes in Git? | Understand the modify-add-commit cycle |
| How do I check the status of my code version?|Explain where information is stored at each stage of that cycle.|
|How can I recover old versions of files?| Walk through the git history, understand the use of commit hashes|

## Why do we need to keep track of versions?

**Problem: If you have to identify and find your code from 17 days ago, can you?**

Version control is an answer to the following questions (do you recognize some of them?):

- "It broke â€¦ hopefully I have a working version somewhere?"
- "Can you please send me the latest version?"
- "Where is the latest version?"
- "Which version are you using?"
- "Which version have the authors used in the paper I am trying to reproduce?"
- "Found a bug! Since when was it there?"
- "I am sure it used to work. When did it change?"
- "My laptop is gone. Is my thesis now gone?"

## Popular automated version control systems
*Git* is the by far most used version control system. Platforms using *Git* are [GitHub](https://github.com/), [GitLab](https://gitlab.com) and [BitBucket](https://bitbucket.org). All three platforms use the same *Git* commands but they doffer in their web interfaces.

This tutorial uses GitHub.





### Exercise

* After moving files into your repository, run `git status` to see what Git thinks has changed.

* Please note: are there (temporary) files you do not wish to track?
  Add them to the `.gitignore` file.
  Consider a `.gitignore` template for your language: examples on [this github repo](https://github.com/github/gitignore).

* Run `git add` to stage the changes, use `git status` to check what has happened.

* Run `git commit` to add the changes to you git project history and use a descriptive commit message.

* Run `git log` to see the history of your project.

Your changes are now saved in your local (on your PC) repository. You still need to push the changes to GitHub. Run `git push` to do this.

* Can you use Git and push to Github from your IDE?

* Experiment with editing and committing on GitHub itself (e.g. add something to the README file). You can then 'download' your changes to your local repository using `git pull`.

* Run `git log` again to see the history of your project.

* Optional: What happens if you edit the same file online and locally, and try to push/pull?
  (Hint: this often causes a 'merge conflict', which is no fun to experience.
  Going through it today means we can assist you if necessary!)