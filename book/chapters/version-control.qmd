---
format: "html"
---
# Automated version control 

## Overview
| Questions | Objectives |
|-----------|------------|
| What is version control and Why should I use it? | Understand the benefits of an automated version control system.|
| | Understand the basics of how automated version control systems work|
| How do I record changes in Git? | Understand the modify-add-commit cycle |
| How do I check the status of my code version?|Explain where information is stored at each stage of that cycle.|
|How can I recover old versions of files?| Walk through the git history, understand the use of commit hashes|

## Why do we need to keep track of versions?

**Problem: If you have to identify and find your code from 17 days ago, can you?**

Version control is an answer to the following questions (do you recognize some of them?):

- "It broke … hopefully I have a working version somewhere?"
- "Can you please send me the latest version?"
- "Where is the latest version?"
- "Which version are you using?"
- "Which version have the authors used in the paper I am trying to reproduce?"
- "Found a bug! Since when was it there?"
- "I am sure it used to work. When did it change?"
- "My laptop is gone. Is my thesis now gone?"

## Popular automated version control systems
*Git* is the by far most used version control system. Platforms using *Git* are [GitHub](https://github.com/), [GitLab](https://gitlab.com) and [BitBucket](https://bitbucket.org). All three platforms use the same *Git* commands but they doffer in their web interfaces.

This tutorial uses GitHub.

## Browse an existing project

In this chapter, we will look at an existing repository to understand how all the pieces work together.

::: {.callout-note}

- See a real Git repository and understand what is inside of it.
- Understand how version control allows advanced inspection of a repository.
- See how Git allows multiple people to collaborate relatively easily.
- See the big picture instead of remembering a bunch of commands.

:::

Go to the git repository [Recipe book](https://github.com/cr-workshop-exercises/recipe-book).

### Basic Browsing
The most basic thing to look at is the history of commits.

- This is visible from a button in the repository view. We see every change, when, and who has committed.
- Every change has a unique identifier, such as 554c187. This can be used to identify both this change, and the whole project’s version as of that change.
- Clicking on a change in the view shows more.

[Screenshot]

We can also have a look at the history of a single file, so we know when the file was changed last and by whom. Click on a file and then on the history.

[Screenshot]

### Exercises

Explore the Web interface!

1. How many changes did the Guacamole recipe receive?
2. Which recipes include the ingredient "salt"?

Version control makes it very easy to find all occurrences of a single word. This is useful for things like finding where functions or variables are defined or used.

### Who modified each line last and when?

This is called the "annotate" or "blame" view. The name "blame" is very unfortunate, but it is the standard term for historical reasons for this functionality and it is not meant to blame anyone.

[Screenshot]

### Can you use these recipes yourself? Are you allowed to share modifications?

- Look at the file LICENSE.
- It says it is “Creative Commons Zero 1.0”, which is equivalent to public domain. You can use them without conditions.
- Note the GitHub view of the file LICENSE gives a nice summary of what it means. Try it out:

### Browse issues and pull requests in the upstream repository

This can only be done through the GitHub view. Issues and Pull requests are different for each GitHub copy.

- Click on the “Issues” tab. These are notes that people have added, which allow discussion about the project. Often they are used to communicate problems or ideas.

- Click on the “Pull requests” tab. This allows anyone to propose changes, but only the repository owners can accept.

### Summary

- Git allowed us to understand this simple project much better than we could, if it was just a few files on our own computer.
- It was easy to share the project with the course.

In the next section we will create our own Git repository!


## Creating a local code repository

## Uploading your code repository to GitHub

## The Git workflow

Edit -> commit + message -> push

Pull -> edit -> commit -> push



### Exercise

* After moving files into your repository, run `git status` to see what Git thinks has changed.

* Please note: are there (temporary) files you do not wish to track?
  Add them to the `.gitignore` file.
  Consider a `.gitignore` template for your language: examples on [this github repo](https://github.com/github/gitignore).

* Run `git add` to stage the changes, use `git status` to check what has happened.

* Run `git commit` to add the changes to you git project history and use a descriptive commit message.

* Run `git log` to see the history of your project.

Your changes are now saved in your local (on your PC) repository. You still need to push the changes to GitHub. Run `git push` to do this.

* Can you use Git and push to Github from your IDE?

* Experiment with editing and committing on GitHub itself (e.g. add something to the README file). You can then 'download' your changes to your local repository using `git pull`.

* Run `git log` again to see the history of your project.

* Optional: What happens if you edit the same file online and locally, and try to push/pull?
  (Hint: this often causes a 'merge conflict', which is no fun to experience.
  Going through it today means we can assist you if necessary!)