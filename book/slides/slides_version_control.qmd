--- 
format: 
  revealjs:
    margin: 0
    theme: ../styles/uu.scss
    logo: ../images/UU_logo_2021_EN_RGB.png
    footer: "Workshop Computational Reproducibility"
    mermaid:
      theme: default
    mermaid-format: png
execute:
  enabled: false
  echo: true
---

# Version Control {data-background-color="#FFCD00"}


## Why do you need version control?

::: {.theme-section}

:::: {.columns}

::: {.column width="55%"}

- It will help you manage ~~your code~~ most of your files (it is like track changes on steroids: it applies to all files in a folder).

- It allows you to trace back your steps: if something breaks, you can figure out what happened.

- NO MORE thesis_final_final_SERIOUSLYFINAL.Rmd

#### even better:
- a good version control system allows you to collaborate and share!

- a good version control system facilitates experimentation!
:::

::: {.column width="5%"}
:::
::: {.column width="40%"}

![](http://www.phdcomics.com/comics/archive/phd101212s.gif){width=80%}

:::
::::
:::

## What is git?

::: {.theme-section}

:::: {.columns}

::: {.column width="65%"}

- Distributed Version Control system written by Linus Torvalds (of Linux fame)

- Allows you to log updates, branch your work (so you can experiment without losing the original!), and keep all backups, while efficiently using your storage

- Gives user a lot of control on what to track, and adds a narrative to changes ('commit comments')

- Current standard for code

- Open Source software written for the command line...

- ... but many GUI-clients exist nowadays, and most coding IDEs have built-in git.

:::
::: {.column width="5%"}
:::
::: {.column width="30%"}

![](../images/screenshots/distributed.png){fig-align="center" width=70%}

![](https://imgs.xkcd.com/comics/git.png){fig-align="center" width=70%}

:::
::::
:::

## Your turn: starting with git

::: {.theme-section}

1. We have created a repository from a template repository on GitHub. 

2. After that, we cloned the repository to our local PC and moved some of our files into the repository.

3. Navigate to your project folder in a terminal.
```{python}
cd [path/to/project_folder]
```

4. Verify that your project folder is a git repository by locating the .git folder:
```{python}
ls -a
```

:::

## Your turn: Git history

::: {.theme-section}

Use [Git log](https://git-scm.com/docs/git-log) to check the history of your project:
```{python}
git log
```
![](../images/screenshots/git_log.png){fig-align="center"}



Alternatively, via GitHub it is also possible to view the history of your project. Let's see how a mature project looks like in this [repository of the happygitwithr book](https://github.com/jennybc/happy-git-with-r):

![](../images/screenshots/git_history.png){fig-align="center"}

:::

## Git History

```{mermaid}
%%| echo: false
%%| fig-width: 14
gitGraph
   commit id: "Intial commit"
   commit id: "add my scripts"
   commit id: "add plotting function"
   commit id: "fix bug in plotting function"
```


## Your turn: Useful git commands

::: {.theme-section}


```{python}
git status
```

[Git status](https://git-scm.com/docs/git-status) shows you the status of your repository. It tells you which files are created, modified, or deleted relative to the last **git snapshot** (aka __commit__) of your project.

```{python}
git diff
```

[Git diff](https://git-scm.com/docs/git-diff) shows you the actual differences between the files that you have changed since the last snapshot.

```{python}
git --help
```

This command will show you all the commands that you can use with git.

:::

## Your turn: Making changes

::: {.theme-section}

5. If you have added your files to your git repository on your PC, now add all your files to the staging area:
```{python}
git add *
```

5. Commit all the files in the staging area to your repository:
```{python}
git commit -m "add my files"
```

:::

## Your turn: pushing to github

::: {.theme-section}

You can now push the content of your local repository to the one on github:

```{python}
git push
```

Congrats, you have made your first push and your scripts are online!

![](https://octodex.github.com/images/original.png){width=200} \\\_\_\_ _THANK YOU!_

Take a look at your online repository. Who is the author of your commits? If it is not you, you can configure git to use your identity (make sure github knows this email address):

<br>

```{python}
git config --global user.name "Your Name"
git config --global user.email "your@email.com"
```

:::

## Your workflow

::: {.theme-section}

1. Add the changed file(s) to the staging area, and commit the changes:
```{python}
git add src/filename.py anotherfile.txt
git add config/configfile.json
git status
git commit -m "My commit message"
git push
```
NB: don't forget your commit message (try what happens if you do!).

![Image credit: Software Carpentries](../images/swcarpentry/git-staging-area.svg){width=700}

:::

## Summary

::: {.theme-section}

Useful git commands:

```{python}
git log
git log --oneline
git status
git diff
git diff HEAD~3
git --help
```

:::

## .gitignore

::: {.theme-section}

The .gitignore file in your template contains files that **by definition** will not be tracked by git.

For example, if you do not want to track a file .DS_Store (always present on my mac), you enter a line like this in your .gitignore file:

```{python}
.DS_Store
```

Similarly, you can ensure all output in a folder will not be tracked:

```{python}
results/
```

Or all files with a certain extension:
```{python}
 *.dat 
```

_NB: There is a .gitkeep file in your template -- this does not do the opposite to .gitignore, but is instead used as a placeholder for folders: git does not track empty folders..._

:::

## Your turn!

::: {.theme-section}

1. Continue moving your files into the file template.

1. Add, commit, and push all files you want to track! (Do you want to move a tracked file within a git repository?
`git mv path/to/file.svg newpath/file.svg`
and don't forget to commit!)

1. Are there (temporary) files you do not wish to track? Add them to the .gitignore file. Consider a .gitignore template for your language: [examples on this github repo](https://github.com/github/gitignore).

1. Continue editing your code, and add/commit/push your changes. Can you do it from your IDE?

1. Experiment with editing and committing on github itself. You can then 'download' your code to your local repository using `git pull`.

1. What happens if you edit the same file online and locally, and try to push/pull?

:::

## Enjoy, and git responsibly!

::: {.theme-section}

- Commits should be atomic: comprehensive 'units' of changes.
  - **DO**: edit/add an .svg and add it to your .Rmd presentation in the same commit
  - **DON'T**: edit for a full day and put this in a single commit (or worse: forget to...)

- Commits should have informative messages so you (and others) can trace your steps

  ![](https://imgs.xkcd.com/comics/git_commit.png){fig-align="center" width=500}

- Track most files; .gitignore those files you don't.

- Explore new ideas with branches, keep a stable version on `main`

:::


## Do you want to learn more?

::: {.theme-section}

- A [Software Carpentry course on git](https://swcarpentry.github.io/git-novice/)

- A [version control + git tutorial](https://www.atlassian.com/git/tutorials/what-is-version-control) on Atlassian

- A [git cheatsheet](https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet) from Atlassian

- A book with [all the ins and outs of git](https://www.git-scm.com/book/en/v2) from the git website

![](../images/atlassian/bubblediag.svg){fig-align="center"}

:::
