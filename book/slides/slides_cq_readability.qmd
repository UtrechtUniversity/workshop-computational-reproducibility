--- 
format: 
  revealjs:
    margin: 0
    theme: ../styles/uu.scss
    logo: ../images/UU_logo_2021_EN_RGB.png
    footer: "Workshop Computational Reproducibility"
---


# Code Quality {data-background-color="#FFCD00"}

## Aspects of good quality code

:::: {.columns}

::: {.column width="45%"}

::: {style="text-align: left; margin-top: 2em"}

- Readable:

	A human being can easily understand the purpose of the code and can maintain the code.
 	
- Reusable:

	Code is written in such a way that it can be reused across multiple contexts with little or no modification required.
	
- Robust:

	A computer system is able to cope with errors during execution.

:::
:::
::: {.column width="0%"}
:::
::: {.column width="55%"}

![Source: [xkcd](https://xkcd.com/1513/)](https://imgs.xkcd.com/comics/good_code.png){fig-align="center" width=50%}

:::
::::

## Code readability

::: {.theme-section}

Code is read more often than it is written.
— Guido van Rossum (creator of Python)

- At some point someone else or our future us will need to understand the code we write today.

:::

## Variable names

::: {.theme-section}

- Use informative names for functions and variables

#### Meaningless variable names:
:::: {.columns}
::: {.column width="50%"}

```python
import pandas as pd
x = "Alex"
y = 42
z = pd.DataFrame()
my_favourite_number = "ssh, I'm a string"
```

:::
::: {.column width="5%"}
:::
::: {.column width="45%"}

```python
import pandas as pd

# Defining variables
first_name = "Alex"
number_of_attendees = 42
empty_dataframe = pd.DataFrame()


# Using variables
print("Hi " + first_name)
number_of_attendees += 1
```
:::
::::
:::

## Function names

::: {.theme-section}

- Name functions after the task they perform.
- Use verb-based function names



```r
process_text <- function(data) {
    ...
}

processed_text <- process_text("The following document was handled using...")
```

- Name function in form of a question if return value is boolean 

```r
are_missing_values_present <- function(data) {
  if (NA %in% data) {
      TRUE
  } else {
      FALSE
  }
}
```

:::

## Data pipeline examples

::: {.theme-section}

Which one is more readable to you?

- Short version
 
```r
data_path <- "path/to/data"
report_data <- generate_report(model(clean(load(data_path))))

```

- More explicit version

```r
data <- load(data_path)
clean_data <- clean(data)
model_results <- model(clean_data)
report_data <- generate_report(model_results)
```

:::

## Style matters (Python)

::: {.theme-section}
- Is the code using everything that language ‘X’ has to offer?

```python
# Example 1 - very unpythonic
i = 0
my_data = []
while i < 100:
  my_data += [i * i / 356]
  i += 1

# Example 2 - more use of Python features, such as `range` and `append`
my_data = []
for i in range(100):
  my_data.append(i**2 / 356)
```
Python at its best:
```python
# Example 3 - making full use pythonic idioms, `range` with list comprehension
my_data = [i**2 / 356 for i in range(100)]

```
:::

## Style matters (R)

::: {.theme-section}


```r
# Example 1 - not idiomatic
i = 0
my_data = c()
while (i < 100) {
  my_data = c(my_data, i * i / 356)
  i = i + 1
}

# Example 2 - more use of R features, e.g. `append` and idiomatic assignment (' <- ')
my_data = c()
for (i in 0:100) {
  my_data <- append(my_data, i^2 / 365)
}
```

R at its best:
```r
# Example 3 - making  use of R's built-in vectors
my_data <- (0:100) ^ 2 / 365
```
:::

## Consistency
::: {.theme-section}
- Use a consistent style
  - Your language of choice will impact how you separate words e.g CamelCase or snake_case
  - Consistency will make your code easier to understand and maintain
  - Consult a styleguide for your language 

:::

## Linters and Formatters

::: {.theme-section}


- Linters
	- Analyse your code to flag stylistic errors 
	- Find small bugs
	- Identify security issues

- Formatters 
	- Detect when you have diverged from a style
	- Automatically correct the formatting of your code

| Language | Linters | Formatters |
|---------|:-----|:------|
| R | lintr | formatR, styler|
| Python | ruff, pylint | ruff, black |

:::

## Linters: R

::: {.theme-section}

:::: {.columns}

::: {.column width="40%"}
_Function_: `lintr::lint(filename)`

The [lintr](https://lintr.r-lib.org/) package in R:
:::

::: {.column width="60%"}
![](../images/lintr-r.png){width=100%}
:::
::::
:::

## Linters: Python

::: {.theme-section}

The [`ruff`](https://docs.astral.sh/ruff/) library in Python:

_Function_: `ruff check --fix path/to/code/to/check.py`

```python
 ruff check --fix src-qt5/main.py

src-qt5/main.py:1522:9: E722 Do not use bare `except`
Found 16 errors (1 fixed, 1 remaining).
```

:::

## (Auto)formatters

::: {.theme-section}

- **R:** The [`styler`](https://styler.r-lib.org/) package 
	The [styler](https://styler.r-lib.org/) package in R:

	![](https://raw.githubusercontent.com/lorenzwalthert/some_raw_data/master/styler_0.1.gif){width=60%}

	_Function_: `styler::style_file(filepath)`

- **Python:** We will use `ruff` again:
	_Function_: `ruff format path/to/code/to/check.py`
:::



## Your turn

::: {.theme-section}

* Run a _linter_ through your code and identify style issues:

    * **R:** [`lintr`](https://lintr.r-lib.org/)
    * **Python:** [`ruff check`](https://docs.astral.sh/ruff/)

* Edit your code to improve the style compatibility, based on the feedback from your linter.

* Run an _autoformatter_ through your code to automatically fix issues instead of simply flagging them: 

    * **R:** [`styler`](https://styler.r-lib.org/)
    * **Python:** [`ruff format`](https://docs.astral.sh/ruff/)

* If you find code that is hard to read, or variable names that need adjusting, make a note to work on it. Use #TODO or another consistent label so you can extract these notes later.

:::