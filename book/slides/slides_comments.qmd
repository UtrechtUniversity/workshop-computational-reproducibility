--- 
format: 
  revealjs:
    margin: 0
    theme: ../styles/uu.scss
    logo: ../images/UU_logo_2021_EN_RGB.png
    footer: "Workshop Computational Reproducibility"
---


# Project documentation {data-background-color="#FFCD00"}

## Why do you need documentation?
::: {.theme-section}
:::

- You want yourself to understand how code written some time ago works
- You want others to understand how to (re-)use your code

**For this you need to**

- Explain parts of your code with __comments__
- Explain what to install and how to get started in your __readme__
- Explain in-depth use of your code in a __notebook__

## Comments
::: {.theme-section}
:::: {.columns}
::: {.column width="60%"}

**Comments are annotations you write directly in the code source.**

They:

- are written for users who deal with your source code

- explain parts that are not intuitive from the code itself

- **do not** replace readable or structured code

- (in a specific structure) can be used to directly generate documentation for users.
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
![](../images/comments.jpeg){height="50%"}
:::

::: footer
Comic source: [Geek & Poke](https://geekandpoke.typepad.com/geekandpoke/2011/06/code-commenting-made-easy.html)
:::
::::
:::

## When **not** to use comments

::: {.theme-section}

- ...to repeat in natural language what is written in your code

```r
# Now we check if the age of a patient is greater than 18
if(agePatient > 18)

```

- ...to turn old code into zombie code (fine for troubleshooting, but do not leave it in!)

```r
# Do not run this!!
# itDoesNotWork <- optimizeMulticoreDeepLearning(myProteins)
# if(itDoesNotWork == 1444){
#    connection <- connectToHPC(currentUser, password)
#}
```

- ...to replace version control, like git

```r
# removed on August 5
# if() ...

#Now, it connects to the API with o-auth2, updated 05/05/2016
...
```

:::

## Comment lines: WHY over HOW

::: {.theme-section}


Comment lines are used to explain the **purpose** of some piece of code.

::: {style="text-align: left; margin-top: 2em"}
:::

```python
# Bug fix GH 20601
# If the data frame is too big, the number of unique index combination
# will cause int32 overflow on windows environments.
# We want to check and raise an error before this happens

num_rows = np.max([index_level.size for index_level in self.new_index_levels])
num_columns = self.removed_level.
```

:::footer
[Pandas reshape.py documentation](https://github.com/pandas-dev/pandas/blob/master/pandas/core/reshape/reshape.py)
:::

:::

## Docstrings
::: {.theme-section}

- Structured comments, associated to *segments* (rather than lines) of code, can be used to generate documentation for users*  of your project.

- These comments are called *docstrings*.

- Docstrings are parsed as the first statement of a module (e.g. a function or class).

- Docstrings allow you to provide documentation to a function, that is relevant to the user of that function.

- Writing docstrings makes you generate your documentation as you are generating the code: efficiently, comprehensively!


:::footer
\*Remember? That's probably you!
:::

:::

## Generating docstrings

::: {.theme-section}


In R you will need a separate package to deal with docstrings:

:::: {.columns}
::: {.column width="45%"}
::: {style="text-align: left; margin-top: 1em"}

```r
library(docstring)

multiply <- function(x,y){
#' @title Multiply two numbers
#' @description This function takes two
#' input numbers and multiplies
#' them. It returns the multiplied result.
#' @param x The first value
#' @param y The second value
#' @return The two arguments multiplied.

  return(x*y)
}

?multiply
```
:::
:::
::: {.column width="5%"}
:::

::: {.column width="40%"}
::: {style="text-align: left; margin-top: 1em"}
![](../images/screenshots/r_documentation.png)
:::
:::
::::

:::footer
*Much more information in the [vignette for docstring.](https://cran.r-project.org/web/packages/docstring/vignettes/docstring_intro.html)*
:::

:::

## Generating docstrings

::: {.theme-section}

In Python, docstrings are string literal comments following a function declaration:


```python
def multiply(x,y):
  """
  Multiply two numbers
  
  This function takes two input numbers and multiplies them.
  It returns the multiplied result.
  Keyword arguments:
  x -- the first value
  y -- the second value
  """
  return x*y
```

NB: a triple single quote (`'''`) works, but PEP style prefers double quotes for docstrings.

:::

## A glimpse into code generation

::: {.theme-section}

Docstrings are formatted so that they can easily be turned into documentation of your package.

:::: {.columns}
::: {.column width="40%"}
::: {style="text-align: left; margin-top: 2em"}
You will need additional tools:

  * http://www.doxygen.nl/ : C++ (and many more languages)
  * http://www.sphinx-doc.org/ : Python
  * https://roxygen2.r-lib.org/ : R

We will not do this today, but it is worth checking out if you want to release your code!

:::
:::
::: {.column width="5%"}
:::
::: {.column width="55%"}
::: {style="text-align: left; margin-top: 2em"}
In the console, in RStudio, run the following command:

```R
roxygen2::roxygenise()
```

::: {style="text-align: left; margin-top: 1em"}
:::

The command above will create documentation files that can be visualized by calling help(your package)

::: {style="text-align: left; margin-top: 1em"}
:::

![](../images/screenshots/document_roxygen_r_help.PNG){width=50%%}
:::
:::
::::

:::

:::footer
__NB__ This works for R packages, with the proper file structure. See here: http://r-pkgs.had.co.nz/intro.html
:::

## Your turn (choose one!)
::: {.theme-section}

**Comment lines**

:::: {.columns}
::: {.column width="40%"}
::: {style="text-align: left; margin-top: 0.5em"}

- Do you have superfluous comments? **Remove them!**
   + Remove your zombie code and version control-like comments
   +See if you can replace a 'how' comment for a 'why' comment (_what is the purpose of this code?_ rather than _this is how this code works_)
:::
:::

::: {.column width="60%"}
::: {style="text-align: left; margin-top: 0.5em"}
- Are there elements without comments that need them? **Add them!**
  + Have you found yourself staring at a piece of code for too long without understanding it? Perhaps it needs more information!
  + Try to comment on the thought behind the code rather than phrasing it in English.
:::
:::
::::

**Docstrings**

- Add a docstring to a function, preferably the last function you worked on (so it's fresh in your memory).
- Keep in mind: what does my user need to know when they are working with this function?

:::

## README

::: {.theme-section}


The README page is the first thing your user will see!

The contents typically include one or more of the following:

:::: {.columns}
::: {.column width="40%"}
::: {style="text-align: left; margin-top: 0.5em"}
- __Configuration instructions__
- __Installation instructions__
- __Operating instructions__
- A file manifest (list of files included)
:::
:::

::: {.column width="55%"}
::: {style="text-align: left; margin-top: 0.5em"}
- Copyright and licensing information
- Contact information for the distributor or programmer
- Known bugs
- Troubleshooting
- Credits and acknowledgments
:::
:::
::::

:::

:::footer
*From wikipedia's [Readme]("https://en.wikipedia.org/w/index.php?title=README&oldid=923233067") page*
:::

## Example README
![mcfly](../images/screenshots/mcfly.png)

## README examples and templates
::: {.theme-section}

Some examples from projects with high quality documentation:

:::: {.columns}
::: {.column width="45%"}
::: {style="text-align: left; margin-top: 0.5em"}

**Bigger community software projects:**

- Python's [Pandas](https://github.com/pandas-dev/pandas)
- [Scikit-learn](https://github.com/scikit-learn/scikit-learn)
- Tidyverse's [Dplyr](https://github.com/tidyverse/dplyr)
:::
:::
::: {.column width="5%"}
:::
::: {.column width="45%"}
::: {style="text-align: left; margin-top: 0.5em"}

**Research software:**

- e-science center's ['McFly' tool](https://github.com/NLeSC/mcfly)
- Utrecht University's: [Automatic Systematic Review](https://github.com/msdslab/automated-systematic-review)
- Utrecht University's [MICE](https://github.com/stefvanbuuren/mice)
:::
:::
::::

::: {style="text-align: left; margin-top: 2em"}
:::

**Templates and ideas:**

- https://gist.github.com/PurpleBooth/109311bb0361f32d87a2
- https://github.com/matiassingers/awesome-readme

:::

## README how?

::: {.theme-section}

- When you create a repository on Github, there is an option to include a README file
![readme_github](../images/screenshots/github_new_repo_readme.png)
- READMEs are files that can be written as text, and commonly use Markdown for formatting.

- Github will show the content of your README file at the root of the repository.

- Your cookiecutter template included a README, so you are all set!

:::

## Your turn!
::: {.theme-section}

**Edit your README file.**

::: {style="text-align: left; margin-top: 2em"}
:::

Make sure to include the following information:

- What does your project do?

- How do you start running your project?

- How does the user download your project? (consider `git clone`!)

- How does the user call the main script(s) that should be executed?

::: {style="text-align: left; margin-top: 2em"}
:::

And perhaps any other elements you are inspired to add (check out the examples!)

:::