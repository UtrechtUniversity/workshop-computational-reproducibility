--- 
format: 
  revealjs:
    margin: 0
    theme: ../styles/uu.scss
    logo: ../images/UU_logo_2021_EN_RGB.png
    footer: "Workshop Computational Reproducibility"
    mermaid:
      theme: default
    mermaid-format: png
execute:
  enabled: false
  echo: true
---


# Dependency management {data-background-color="#FFCD00"}

## Congratulations!

::::: {.theme-section}

You now have a project!

- Your project structure is accessible
- Your code is readable and invites re-use
- The project is under version control
- It has a landing page on Github, with information for a user

:::: {.columns}

::: {.column width="50%"}

Are you done? **It depends...**

:::

::: {.column width="50%"}
![](https://reqtest.com/wp-content/uploads/2015/06/project-dependencies.jpg){width=70%}
:::

::::

:::::

## Dependencies

::: {.theme-section}

Dependencies and versions can stop your users/readers from being able to run your code.
For example: this code written in Python 2.7:


```python
print "Hello world!"
```

No longer works in Python 3!

```python
print "Hello world!"
```

```{fontsize="0.6em"}
  File "/var/folders/96/r1yycxlj28958p1cdynhbyzw0000gn/T/Rtmpa0OGSM/chunk-code-b08d2b78904b.txt", line 1
    print "Hello world!"
                       ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Hello world!")?
```

Instead, we write:
```python
print("Hello world!")
```

:::

## The reproducibility trade-off

::: {.theme-section}

How far do you go towards reproducibility?

<br>

![](../images/dependencytradeoff.svg){height="150pt"}

:::: {.columns}
::: {.column width="45%"}
::: {style="text-align: left; margin-top: 1em"}

- **due diligence** starts at declaring dependencies.

- You can empower your declared dependencies with a package/environment manager such as `uv` (or `conda`).

- packaging dependencies using tools like [renv](https://rstudio.github.io/renv/) (for R), or [uv](https://docs.astral.sh/uv/) (for Python).

:::
:::

::: {.column width="45%"}
::: {style="text-align: left; margin-top: 1em"}

- containers are awesome, and container tools like Docker and Singularity probably sound more daunting than they actually are.
- online environments can be created for your work (in a relatively user friendly way):
  - [CodeOcean](https://codeocean.com) (`$$$`)
  - [binder](https://mybinder.org/) (free!)

:::
:::
::::
:::


## Declaring dependencies

::: {.theme-section}

OK: declare (in your README) how your project works **for you**.

- What language, what version?
- What packages/libraries do you load
- What OS do you use? (Does it work on your collaborator's system?)

Better: prepare a file for an environment manager:

- **what?** A single file describing the necessary dependencies, which can be used to install all dependencies in one step
- **where?** Store the file in the repository root (main folder)
- **which?** This depends on the environment/package manager you want to use:
  - `requirements.txt`
  - `environment.yml`  
  - `pyproject.toml`

:::

## Dependency managers

<br>

::: {style="margin-left: 1em; font-size: 2em;"}

`uv` (for Python)

:::

::: {.theme-section}

- An extremely fast Python package and project manager, written in Rust.
- Create separate [environments](https://docs.astral.sh/uv/pip/environments/) for your projects
- Supports lock files and `pyproject.toml`
- Relatively new, increasingly popular and our recommendation

```{python}
curl -LsSf https://astral.sh/uv/install.sh | sh
uv venv --python 3.11
uv init
uv add 'pandas==1.5.3'
```

:::

## Dependency managers

<br>

::: {style="margin-left: 1em; font-size: 2em;"}

`conda` (for Python and R)

:::

::: {.theme-section}

- Create separate environments for your projects
- Switch between environments
- Store the environment description in `environment.yml`
- Consider going through [this quick intro](https://geohackweek.github.io/Introductory/01-conda-tutorial/)  to `conda` environments.
- Or get the full story in the [conda documentation](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html).

[Installation](https://www.anaconda.com/docs/getting-started/miniconda/install#quickstart-install-instructions)


```{python}
conda create -n myenv python=3.11
conda activate myenv
conda install pandas=1.5.3
```

:::

## Dependency managers{.smaller}

<br>

::: {style="margin-left: 1em; font-size: 2em;"}

`renv` (for R)

:::

::: {.theme-section}

Install with:
```{r}
#| eval: false
install.packages("renv")
```
Activate with:
```{r}
#| eval: false
renv::init()
```
Update with:
```{r}
#| eval: false
renv::snapshot()
```
Load the contents of a lockfile with:
```{r}
#| eval: false
renv::restore()
```
[Read more here.](https://blog.rstudio.com/2019/11/06/renv-project-environments-for-r/)

:::

## Summary

<br>

![](../images/dependencytradeoff.svg){.absolute top="200" left="80" height="300"}

<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>

::: {.theme-section}

- Good: Declaring dependencies in a README
- Better: Declaring dependencies in an environment file
- Close to fully reproducible: lock files

:::

## Your turn!{.smaller}

::: {.theme-section}

+ Add basic dependency information to your readme file:
  - What version of your language is required?
  - Which packages does a user need to load before running your project?
  - Can you provide installation instructions?

+ Are you working with Python?
  - Generate an environment for your project, and store the `environment.yml` file in root.

+ Are you working with R?
  - Install `renv`, and initiate it to store the lock file in root.

+ Be sure again to update your git repository:
   
   ```bash
   git add [your changed files]
   git commit -m "the change you made"
   git push
   ```
:::
